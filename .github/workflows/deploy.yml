name: CI/CD with Docker Compose

on:
  push:
    branches: [ "deploy" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Make application.yml
        run: |
          mkdir -p ./artichat/src/main/resources
          echo "${{ secrets.APPLICATION }}" > ./artichat/src/main/resources/application.yml

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          cd ./artichat
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        uses: docker/build-push-action@v6
        with:
          context: ./artichat
          file: ./artichat/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_REPO }}:latest
          
      - name: Deploy via SSM
        run: |
          INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}

          # 1) Ensure Docker & Compose on Amazon Linux 2023
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name AWS-RunShellScript \
            --comment "Ensure Docker & Compose on AL2023" \
            --parameters commands=["if ! command -v docker; then sudo dnf install -y docker docker-compose-plugin && sudo systemctl enable --now docker; fi"]

          # 2) Generate SSM parameter file
          cat <<EOF > ssm-deploy.json
            {"commands":[
              "echo '${{ secrets.DOCKER_COMPOSE }}' | base64 -d > /home/ec2-user/docker-compose.yml",
              "cd /home/ec2-user && sudo docker compose down",
              "cd /home/ec2-user && sudo docker pull ${{ secrets.DOCKER_REPO }}:latest",
              "cd /home/ec2-user && sudo docker compose up -d --pull always --force-recreate",
              "sudo docker system prune -af"
            ]}
            EOF

          # 3) Deploy application via SSM
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name AWS-RunShellScript \
            --comment "Deploy via Docker Compose" \
            --parameters file://ssm-deploy.json
